@startuml umlPlayground

class GameModel extends AbstractModel {
    -model: Model   
    +start(): void
    +setGameState(gameState: Object): void

}


abstract class AbstractModel {
    +setGameState(gameState: Object): void
    +getGameState(): Object
}

class View {
    +displayGameBoard(): void
    +displayGameOver(): void
}

class Controller {
    -model: Model
    -view: View
    +handleInput(input: Object): void
}

interface Observer {
    +notify(): void
}

interface InputController {
    +input(): void
}

AbstractModel <- Controller
Controller <- View
View <-- AbstractModel
AbstractModel ..> Observer
Controller ..> InputController

@enduml