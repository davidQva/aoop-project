@startuml
package GameUI {
    interface Game {
        +void start()
        +void pause()
        +void resume()
        +void stop()
        +void setScore(int score)
    }
    interface TileGame {
        +void moveUp()
        +void moveDown()
        +void moveLeft()
        +void moveRight()
    }
    abstract class AbstractGame implements Game, TileGame {
        -int score
        -boolean isPaused
        -boolean isStopped
        +void drawBoard()
    }
    class SokobanGame extends AbstractGame {
        +void moveUp()
        +void moveDown()
        +void moveLeft()
        +void moveRight()
        +void drawBoard()
    }
    class SnakeGame extends AbstractGame {
        +void moveUp()
        +void moveDown()
        +void moveLeft()
        +void moveRight()
        +void drawBoard()
    }
    class GameFactory {
        +static Game createSokobanGame()
        +static Game createSnakeGame()
    }
    class GameUIFramework {
        +void startGame(Game game)
        +void pauseGame(Game game)
        +void resumeGame(Game game)
        +void stopGame(Game game)
        +void setScore(Game game, int score)
        +void drawBoard(Game game)
    }
    class GameUIApplication {
        +static void main(String[] args)
    }
}
@enduml
